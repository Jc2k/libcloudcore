{
    "metadata": {
        "request-pipeline": [
            "libcloudcore.serializers.xml:XmlSerializer"
        ]
    },
    "endpoints": [
        {
            "when": [
                [
                    "region",
                    "starts-with",
                    "cn-"
                ]
            ],
            "http": {
                "host": "{service}.{region}.amazonaws.com.cn"
            }
        },
        {
            "when": [
                [
                    "region",
                    "not-equals",
                    null
                ]
            ],
            "http": {
                "host": "{service}.{region}.amazonaws.com"
            }
        }
    ],
    "operations": {
        "AddPermission": {
            "documentation": "<p>Adds a permission to the access policy associated with the specified AWS Lambda function. In a \"push event\" model, the access policy attached to the Lambda function grants Amazon S3 or a user application permission for the Lambda <code>lambda:Invoke</code> action. For information about the push model, see <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/lambda-introduction.html\">AWS Lambda: How it Works</a>. Each Lambda function has one access policy associated with it. You can use the <code>AddPermission</code> API to add a permission to the policy. You have one access policy but it can have multiple permission statements.</p> <p>This operation requires permission for the <code>lambda:AddPermission</code> action.</p>",
            "input": {
                "shape": "AddPermissionRequest"
            },
            "output": {
                "shape": "AddPermissionResponse"
            }
        },
        "CreateEventSourceMapping": {
            "documentation": "<p>Identifies a stream as an event source for a Lambda function. It can be either an Amazon Kinesis stream or an Amazon DynamoDB stream. AWS Lambda invokes the specified function when records are posted to the stream.</p> <p>This is the pull model, where AWS Lambda invokes the function. For more information, go to <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/lambda-introduction.html\">AWS Lambda: How it Works</a> in the <i>AWS Lambda Developer Guide</i>.</p> <p>This association between an Amazon Kinesis stream and a Lambda function is called the event source mapping. You provide the configuration information (for example, which stream to read from and which Lambda function to invoke) for the event source mapping in the request body.</p> <p> Each event source, such as an Amazon Kinesis or a DynamoDB stream, can be associated with multiple AWS Lambda function. A given Lambda function can be associated with multiple AWS event sources. </p> <p>This operation requires permission for the <code>lambda:CreateEventSourceMapping</code> action.</p>",
            "input": {
                "shape": "CreateEventSourceMappingRequest"
            },
            "output": {
                "shape": "EventSourceMappingConfiguration"
            }
        },
        "CreateFunction": {
            "documentation": "<p>Creates a new Lambda function. The function metadata is created from the request parameters, and the code for the function is provided by a .zip file in the request body. If the function name already exists, the operation will fail. Note that the function name is case-sensitive. </p> <p>This operation requires permission for the <code>lambda:CreateFunction</code> action.</p>",
            "input": {
                "shape": "CreateFunctionRequest"
            },
            "output": {
                "shape": "FunctionConfiguration"
            }
        },
        "DeleteEventSourceMapping": {
            "documentation": "<p>Removes an event source mapping. This means AWS Lambda will no longer invoke the function for events in the associated source.</p> <p>This operation requires permission for the <code>lambda:DeleteEventSourceMapping</code> action.</p>",
            "input": {
                "shape": "DeleteEventSourceMappingRequest"
            },
            "output": {
                "shape": "EventSourceMappingConfiguration"
            }
        },
        "DeleteFunction": {
            "documentation": "<p>Deletes the specified Lambda function code and configuration.</p> <p>When you delete a function the associated access policy is also deleted. You will need to delete the event source mappings explicitly.</p> <p>This operation requires permission for the <code>lambda:DeleteFunction</code> action.</p>",
            "input": {
                "shape": "DeleteFunctionRequest"
            }
        },
        "GetEventSourceMapping": {
            "documentation": "<p>Returns configuration information for the specified event source mapping (see <a>CreateEventSourceMapping</a>).</p> <p>This operation requires permission for the <code>lambda:GetEventSourceMapping</code> action.</p>",
            "input": {
                "shape": "GetEventSourceMappingRequest"
            },
            "output": {
                "shape": "EventSourceMappingConfiguration"
            }
        },
        "GetFunction": {
            "documentation": "<p>Returns the configuration information of the Lambda function and a presigned URL link to the .zip file you uploaded with <a>CreateFunction</a> so you can download the .zip file. Note that the URL is valid for up to 10 minutes. The configuration information is the same information you provided as parameters when uploading the function.</p> <p>This operation requires permission for the <code>lambda:GetFunction</code> action.</p>",
            "input": {
                "shape": "GetFunctionRequest"
            },
            "output": {
                "shape": "GetFunctionResponse"
            }
        },
        "GetFunctionConfiguration": {
            "documentation": "<p>Returns the configuration information of the Lambda function. This the same information you provided as parameters when uploading the function by using <a>CreateFunction</a>.</p> <p>This operation requires permission for the <code>lambda:GetFunctionConfiguration</code> operation.</p>",
            "input": {
                "shape": "GetFunctionConfigurationRequest"
            },
            "output": {
                "shape": "FunctionConfiguration"
            }
        },
        "GetPolicy": {
            "documentation": "<p>Returns the access policy, containing a list of permissions granted via the <code>AddPermission</code> API, associated with the specified bucket.</p> <p>You need permission for the <code>lambda:GetPolicy action.</code></p>",
            "input": {
                "shape": "GetPolicyRequest"
            },
            "output": {
                "shape": "GetPolicyResponse"
            }
        },
        "Invoke": {
            "documentation": "<p> Invokes a specified Lambda function. </p> <p>This operation requires permission for the <code>lambda:InvokeFunction</code> action.</p>",
            "input": {
                "shape": "InvocationRequest"
            },
            "output": {
                "shape": "InvocationResponse"
            }
        },
        "InvokeAsync": {
            "documentation": "<important>This API is deprecated. We recommend you use <code>Invoke</code> API (see <a>Invoke</a>).</important> <p>Submits an invocation request to AWS Lambda. Upon receiving the request, Lambda executes the specified function asynchronously. To see the logs generated by the Lambda function execution, see the CloudWatch logs console.</p> <p>This operation requires permission for the <code>lambda:InvokeFunction</code> action.</p>",
            "input": {
                "shape": "InvokeAsyncRequest"
            },
            "output": {
                "shape": "InvokeAsyncResponse"
            }
        },
        "ListEventSourceMappings": {
            "documentation": "<p>Returns a list of event source mappings you created using the <code>CreateEventSourceMapping</code> (see <a>CreateEventSourceMapping</a>), where you identify a stream as an event source. This list does not include Amazon S3 event sources. </p> <p>For each mapping, the API returns configuration information. You can optionally specify filters to retrieve specific event source mappings.</p> <p>This operation requires permission for the <code>lambda:ListEventSourceMappings</code> action.</p>",
            "input": {
                "shape": "ListEventSourceMappingsRequest"
            },
            "output": {
                "shape": "ListEventSourceMappingsResponse"
            }
        },
        "ListFunctions": {
            "documentation": "<p>Returns a list of your Lambda functions. For each function, the response includes the function configuration information. You must use <a>GetFunction</a> to retrieve the code for your function.</p> <p>This operation requires permission for the <code>lambda:ListFunctions</code> action.</p>",
            "input": {
                "shape": "ListFunctionsRequest"
            },
            "output": {
                "shape": "ListFunctionsResponse"
            }
        },
        "RemovePermission": {
            "documentation": "<p>You can remove individual permissions from an access policy associated with a Lambda function by providing a Statement ID. </p> <p>Note that removal of a permission will cause an active event source to lose permission to the function. </p> <p>You need permission for the <code>lambda:RemovePermission</code> action.</p>",
            "input": {
                "shape": "RemovePermissionRequest"
            }
        },
        "UpdateEventSourceMapping": {
            "documentation": "<p>You can update an event source mapping. This is useful if you want to change the parameters of the existing mapping without losing your position in the stream. You can change which function will receive the stream records, but to change the stream itself, you must create a new mapping. </p> <p>This operation requires permission for the <code>lambda:UpdateEventSourceMapping</code> action.</p>",
            "input": {
                "shape": "UpdateEventSourceMappingRequest"
            },
            "output": {
                "shape": "EventSourceMappingConfiguration"
            }
        },
        "UpdateFunctionCode": {
            "documentation": "<p> Updates the code for the specified Lambda function. This operation must only be used on an existing Lambda function and cannot be used to update the function configuration. </p> <p>This operation requires permission for the <code>lambda:UpdateFunctionCode</code> action.</p>",
            "input": {
                "shape": "UpdateFunctionCodeRequest"
            },
            "output": {
                "shape": "FunctionConfiguration"
            }
        },
        "UpdateFunctionConfiguration": {
            "documentation": "<p>Updates the configuration parameters for the specified Lambda function by using the values provided in the request. You provide only the parameters you want to change. This operation must only be used on an existing Lambda function and cannot be used to update the function's code. </p> <p>This operation requires permission for the <code>lambda:UpdateFunctionConfiguration</code> action.</p>",
            "input": {
                "shape": "UpdateFunctionConfigurationRequest"
            },
            "output": {
                "shape": "FunctionConfiguration"
            }
        }
    },
    "shapes": {
        "Action": {
            "type": "string"
        },
        "AddPermissionRequest": {
            "type": "structure",
            "members": [
                {
                    "name": "FunctionName",
                    "shape": "FunctionName",
                    "location": "uri",
                    "locationName": "FunctionName",
                    "documentation": "<p>Name of the Lambda function whose access policy you are updating by adding a new permission.</p> <p> You can specify an unqualified function name (for example, \"Thumbnail\") or you can specify Amazon Resource Name (ARN) of the function (for example, \"arn:aws:lambda:us-west-2:account-id:function:ThumbNail\"). AWS Lambda also allows you to specify only the account ID qualifier (for example, \"account-id:Thumbnail\"). Note that the length constraint applies only to the ARN. If you specify only the function name, it is limited to 64 character in length. </p>"
                },
                {
                    "name": "StatementId",
                    "shape": "StatementId",
                    "documentation": "<p>A unique statement identifier.</p>"
                },
                {
                    "name": "Action",
                    "shape": "Action",
                    "documentation": "<p>The AWS Lambda action you want to allow in this statement. Each Lambda action is a string starting with \"lambda:\" followed by the API name (see <a>Operations</a>). For example, \"lambda:CreateFunction\". You can use wildcard (\"lambda:*\") to grant permission for all AWS Lambda actions. </p>"
                },
                {
                    "name": "Principal",
                    "shape": "Principal",
                    "documentation": "<p>The principal who is getting this permission. It can be Amazon S3 service Principal (\"s3.amazonaws.com\") if you want Amazon S3 to invoke the function, an AWS account ID if you are granting cross-account permission, or any valid AWS service principal such as \"sns.amazonaws.com\". For example, you might want to allow a custom application in another AWS account to push events to AWS Lambda by invoking your function. </p>"
                },
                {
                    "name": "SourceArn",
                    "shape": "Arn",
                    "documentation": "<p>This is optional; however, when granting Amazon S3 permission to invoke your function, you should specify this field with the bucket Amazon Resource Name (ARN) as its value. This ensures that only events generated from the specified bucket can invoke the function. </p> <important>If you add a permission for the Amazon S3 principal without providing the source ARN, any AWS account that creates a mapping to your function ARN can send events to invoke your Lambda function from Amazon S3.</important>"
                },
                {
                    "name": "SourceAccount",
                    "shape": "SourceOwner",
                    "documentation": "<p>The AWS account ID (without a hyphen) of the source owner. For example, if the <code>SourceArn</code> identifies a bucket, then this is the bucket owner's account ID. You can use this additional condition to ensure the bucket you specify is owned by a specific account (it is possible the bucket owner deleted the bucket and some other AWS account created the bucket). You can also use this condition to specify all sources (that is, you don't specify the <code>SourceArn</code>) owned by a specific account. </p>"
                }
            ]
        },
        "AddPermissionResponse": {
            "type": "structure",
            "members": [
                {
                    "name": "Statement",
                    "shape": "String",
                    "documentation": "<p>The permission statement you specified in the request. The response returns the same as a string using \"\\\" as an escape character in the JSON. </p>"
                }
            ]
        },
        "Arn": {
            "type": "string"
        },
        "BatchSize": {
            "type": "integer"
        },
        "Blob": {
            "type": "blob"
        },
        "BlobStream": {
            "type": "blob"
        },
        "CodeStorageExceededException": {
            "type": "structure",
            "members": [
                {
                    "name": "Type",
                    "shape": "String"
                },
                {
                    "name": "message",
                    "shape": "String"
                }
            ]
        },
        "CreateEventSourceMappingRequest": {
            "type": "structure",
            "members": [
                {
                    "name": "EventSourceArn",
                    "shape": "Arn",
                    "documentation": "<p>The Amazon Resource Name (ARN) of the Amazon Kinesis or the Amazon DynamoDB stream that is the event source. Any record added to this stream could cause AWS Lambda to invoke your Lambda function, it depends on the <code>BatchSize</code>. AWS Lambda POSTs the Amazon Kinesis event, containing records, to your Lambda function as JSON.</p>"
                },
                {
                    "name": "FunctionName",
                    "shape": "FunctionName",
                    "documentation": "<p>The Lambda function to invoke when AWS Lambda detects an event on the stream.</p> <p> You can specify an unqualified function name (for example, \"Thumbnail\") or you can specify Amazon Resource Name (ARN) of the function (for example, \"arn:aws:lambda:us-west-2:account-id:function:ThumbNail\"). AWS Lambda also allows you to specify only the account ID qualifier (for example, \"account-id:Thumbnail\"). Note that the length constraint applies only to the ARN. If you specify only the function name, it is limited to 64 character in length. </p>"
                },
                {
                    "name": "Enabled",
                    "shape": "Enabled",
                    "documentation": "<p>Indicates whether AWS Lambda should begin polling the event source, the default is not enabled. </p>"
                },
                {
                    "name": "BatchSize",
                    "shape": "BatchSize",
                    "documentation": "<p>The largest number of records that AWS Lambda will retrieve from your event source at the time of invoking your function. Your function receives an event with all the retrieved records. The default is 100 records.</p>"
                },
                {
                    "name": "StartingPosition",
                    "shape": "EventSourcePosition",
                    "documentation": "<p>The position in the stream where AWS Lambda should start reading. For more information, go to <a href=\"http://docs.aws.amazon.com/kinesis/latest/APIReference/API_GetShardIterator.html#Kinesis-GetShardIterator-request-ShardIteratorType\">ShardIteratorType</a> in the <i>Amazon Kinesis API Reference</i>. </p>"
                }
            ]
        },
        "CreateFunctionRequest": {
            "type": "structure",
            "members": [
                {
                    "name": "FunctionName",
                    "shape": "FunctionName",
                    "documentation": "<p>The name you want to assign to the function you are uploading. You can specify an unqualified function name (for example, \"Thumbnail\") or you can specify Amazon Resource Name (ARN) of the function (for example, \"arn:aws:lambda:us-west-2:account-id:function:ThumbNail\"). AWS Lambda also allows you to specify only the account ID qualifier (for example, \"account-id:Thumbnail\"). Note that the length constraint applies only to the ARN. If you specify only the function name, it is limited to 64 character in length. The function names appear in the console and are returned in the <a>ListFunctions</a> API. Function names are used to specify functions to other AWS Lambda APIs, such as <a>Invoke</a>. </p>"
                },
                {
                    "name": "Runtime",
                    "shape": "Runtime",
                    "documentation": "<p>The runtime environment for the Lambda function you are uploading. Currently, Lambda supports \"java\" and \"nodejs\" as the runtime.</p>"
                },
                {
                    "name": "Role",
                    "shape": "RoleArn",
                    "documentation": "<p>The Amazon Resource Name (ARN) of the IAM role that Lambda assumes when it executes your function to access any other Amazon Web Services (AWS) resources. For more information, see <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/lambda-introduction.html\">AWS Lambda: How it Works</a> </p>"
                },
                {
                    "name": "Handler",
                    "shape": "Handler",
                    "documentation": "<p>The function within your code that Lambda calls to begin execution. For Node.js, it is the <i>module-name</i>.<i>export</i> value in your function. For Java, it can be <code>package.class-name::handler</code> or <code>package.class-name</code>. For more information, see <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/java-programming-model-handler-types.html\">Lambda Function Handler (Java)</a>. </p>"
                },
                {
                    "name": "Description",
                    "shape": "Description",
                    "documentation": "<p>A short, user-defined function description. Lambda does not use this value. Assign a meaningful description as you see fit.</p>"
                },
                {
                    "name": "Timeout",
                    "shape": "Timeout",
                    "documentation": "<p>The function execution time at which Lambda should terminate the function. Because the execution time has cost implications, we recommend you set this value based on your expected execution time. The default is 3 seconds. </p>"
                },
                {
                    "name": "MemorySize",
                    "shape": "MemorySize",
                    "documentation": "<p>The amount of memory, in MB, your Lambda function is given. Lambda uses this memory size to infer the amount of CPU and memory allocated to your function. Your function use-case determines your CPU and memory requirements. For example, a database operation might need less memory compared to an image processing function. The default value is 128 MB. The value must be a multiple of 64 MB.</p>"
                },
                {
                    "name": "Code",
                    "shape": "FunctionCode",
                    "documentation": "<p>The code for the Lambda function. </p>"
                }
            ]
        },
        "Date": {
            "type": "timestamp"
        },
        "DeleteEventSourceMappingRequest": {
            "type": "structure",
            "members": [
                {
                    "name": "UUID",
                    "shape": "String",
                    "location": "uri",
                    "locationName": "UUID",
                    "documentation": "<p>The event source mapping ID.</p>"
                }
            ]
        },
        "DeleteFunctionRequest": {
            "type": "structure",
            "members": [
                {
                    "name": "FunctionName",
                    "shape": "FunctionName",
                    "location": "uri",
                    "locationName": "FunctionName",
                    "documentation": "<p>The Lambda function to delete.</p> <p> You can specify an unqualified function name (for example, \"Thumbnail\") or you can specify Amazon Resource Name (ARN) of the function (for example, \"arn:aws:lambda:us-west-2:account-id:function:ThumbNail\"). AWS Lambda also allows you to specify only the account ID qualifier (for example, \"account-id:Thumbnail\"). Note that the length constraint applies only to the ARN. If you specify only the function name, it is limited to 64 character in length. </p>"
                }
            ]
        },
        "Description": {
            "type": "string"
        },
        "Enabled": {
            "type": "boolean"
        },
        "EventSourceMappingConfiguration": {
            "type": "structure",
            "documentation": "<p>Describes mapping between an Amazon Kinesis stream and a Lambda function.</p>",
            "members": [
                {
                    "name": "UUID",
                    "shape": "String",
                    "documentation": "<p>The AWS Lambda assigned opaque identifier for the mapping.</p>"
                },
                {
                    "name": "BatchSize",
                    "shape": "BatchSize",
                    "documentation": "<p>The largest number of records that AWS Lambda will retrieve from your event source at the time of invoking your function. Your function receives an event with all the retrieved records.</p>"
                },
                {
                    "name": "EventSourceArn",
                    "shape": "Arn",
                    "documentation": "<p>The Amazon Resource Name (ARN) of the Amazon Kinesis stream that is the source of events.</p>"
                },
                {
                    "name": "FunctionArn",
                    "shape": "FunctionArn",
                    "documentation": "<p>The Lambda function to invoke when AWS Lambda detects an event on the stream.</p>"
                },
                {
                    "name": "LastModified",
                    "shape": "Date",
                    "documentation": "<p>The UTC time string indicating the last time the event mapping was updated.</p>"
                },
                {
                    "name": "LastProcessingResult",
                    "shape": "String",
                    "documentation": "<p>The result of the last AWS Lambda invocation of your Lambda function.</p>"
                },
                {
                    "name": "State",
                    "shape": "String",
                    "documentation": "<p>The state of the event source mapping. It can be \"Creating\", \"Enabled\", \"Disabled\", \"Enabling\", \"Disabling\", \"Updating\", or \"Deleting\".</p>"
                },
                {
                    "name": "StateTransitionReason",
                    "shape": "String",
                    "documentation": "<p>The reason the event source mapping is in its current state. It is either user-requested or an AWS Lambda-initiated state transition.</p>"
                }
            ]
        },
        "EventSourceMappingsList": {
            "type": "list",
            "of": "EventSourceMappingConfiguration"
        },
        "EventSourcePosition": {
            "type": "string"
        },
        "FunctionArn": {
            "type": "string"
        },
        "FunctionCode": {
            "type": "structure",
            "documentation": "<p>The code for the Lambda function.</p>",
            "members": [
                {
                    "name": "ZipFile",
                    "shape": "Blob",
                    "documentation": "<p>A base64-encoded .zip file containing your deployment package. For more information about creating a .zip file, go to <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/intro-permission-model.html#lambda-intro-execution-role.html\">Execution Permissions</a> in the <i>AWS Lambda Developer Guide</i>. </p>"
                },
                {
                    "name": "S3Bucket",
                    "shape": "S3Bucket",
                    "documentation": "<p>Amazon S3 bucket name where the .zip file containing your deployment package is stored. This bucket must reside in the same AWS region where you are creating the Lambda function. </p>"
                },
                {
                    "name": "S3Key",
                    "shape": "S3Key",
                    "documentation": "<p>The Amazon S3 object (the deployment package) key name you want to upload. </p>"
                },
                {
                    "name": "S3ObjectVersion",
                    "shape": "S3ObjectVersion",
                    "documentation": "<p>The Amazon S3 object (the deployment package) version you want to upload.</p>"
                }
            ]
        },
        "FunctionCodeLocation": {
            "type": "structure",
            "documentation": "<p>The object for the Lambda function location.</p>",
            "members": [
                {
                    "name": "RepositoryType",
                    "shape": "String",
                    "documentation": "<p>The repository from which you can download the function.</p>"
                },
                {
                    "name": "Location",
                    "shape": "String",
                    "documentation": "<p>The presigned URL you can use to download the function's .zip file that you previously uploaded. The URL is valid for up to 10 minutes.</p>"
                }
            ]
        },
        "FunctionConfiguration": {
            "type": "structure",
            "documentation": "<p>A complex type that describes function metadata.</p>",
            "members": [
                {
                    "name": "FunctionName",
                    "shape": "FunctionName",
                    "documentation": "<p>The name of the function.</p>"
                },
                {
                    "name": "FunctionArn",
                    "shape": "FunctionArn",
                    "documentation": "<p>The Amazon Resource Name (ARN) assigned to the function.</p>"
                },
                {
                    "name": "Runtime",
                    "shape": "Runtime",
                    "documentation": "<p>The runtime environment for the Lambda function.</p>"
                },
                {
                    "name": "Role",
                    "shape": "RoleArn",
                    "documentation": "<p>The Amazon Resource Name (ARN) of the IAM role that Lambda assumes when it executes your function to access any other Amazon Web Services (AWS) resources. </p>"
                },
                {
                    "name": "Handler",
                    "shape": "Handler",
                    "documentation": "<p>The function Lambda calls to begin executing your function.</p>"
                },
                {
                    "name": "CodeSize",
                    "shape": "Long",
                    "documentation": "<p>The size, in bytes, of the function .zip file you uploaded.</p>"
                },
                {
                    "name": "Description",
                    "shape": "Description",
                    "documentation": "<p>The user-provided description.</p>"
                },
                {
                    "name": "Timeout",
                    "shape": "Timeout",
                    "documentation": "<p>The function execution time at which Lambda should terminate the function. Because the execution time has cost implications, we recommend you set this value based on your expected execution time. The default is 3 seconds. </p>"
                },
                {
                    "name": "MemorySize",
                    "shape": "MemorySize",
                    "documentation": "<p>The memory size, in MB, you configured for the function. Must be a multiple of 64 MB.</p>"
                },
                {
                    "name": "LastModified",
                    "shape": "Timestamp",
                    "documentation": "<p>The timestamp of the last time you updated the function.</p>"
                }
            ]
        },
        "FunctionList": {
            "type": "list",
            "of": "FunctionConfiguration"
        },
        "FunctionName": {
            "type": "string"
        },
        "GetEventSourceMappingRequest": {
            "type": "structure",
            "members": [
                {
                    "name": "UUID",
                    "shape": "String",
                    "location": "uri",
                    "locationName": "UUID",
                    "documentation": "<p>The AWS Lambda assigned ID of the event source mapping.</p>"
                }
            ]
        },
        "GetFunctionConfigurationRequest": {
            "type": "structure",
            "members": [
                {
                    "name": "FunctionName",
                    "shape": "FunctionName",
                    "location": "uri",
                    "locationName": "FunctionName",
                    "documentation": "<p>The name of the Lambda function for which you want to retrieve the configuration information.</p> <p> You can specify an unqualified function name (for example, \"Thumbnail\") or you can specify Amazon Resource Name (ARN) of the function (for example, \"arn:aws:lambda:us-west-2:account-id:function:ThumbNail\"). AWS Lambda also allows you to specify only the account ID qualifier (for example, \"account-id:Thumbnail\"). Note that the length constraint applies only to the ARN. If you specify only the function name, it is limited to 64 character in length. </p>"
                }
            ]
        },
        "GetFunctionRequest": {
            "type": "structure",
            "members": [
                {
                    "name": "FunctionName",
                    "shape": "FunctionName",
                    "location": "uri",
                    "locationName": "FunctionName",
                    "documentation": "<p>The Lambda function name. </p> <p> You can specify an unqualified function name (for example, \"Thumbnail\") or you can specify Amazon Resource Name (ARN) of the function (for example, \"arn:aws:lambda:us-west-2:account-id:function:ThumbNail\"). AWS Lambda also allows you to specify only the account ID qualifier (for example, \"account-id:Thumbnail\"). Note that the length constraint applies only to the ARN. If you specify only the function name, it is limited to 64 character in length. </p>"
                }
            ]
        },
        "GetFunctionResponse": {
            "type": "structure",
            "documentation": "<p>This response contains the object for the Lambda function location (see <a>API_FunctionCodeLocation</a></p>",
            "members": [
                {
                    "name": "Configuration",
                    "shape": "FunctionConfiguration"
                },
                {
                    "name": "Code",
                    "shape": "FunctionCodeLocation"
                }
            ]
        },
        "GetPolicyRequest": {
            "type": "structure",
            "members": [
                {
                    "name": "FunctionName",
                    "shape": "FunctionName",
                    "location": "uri",
                    "locationName": "FunctionName",
                    "documentation": "<p>Function name whose access policy you want to retrieve. </p> <p> You can specify an unqualified function name (for example, \"Thumbnail\") or you can specify Amazon Resource Name (ARN) of the function (for example, \"arn:aws:lambda:us-west-2:account-id:function:ThumbNail\"). AWS Lambda also allows you to specify only the account ID qualifier (for example, \"account-id:Thumbnail\"). Note that the length constraint applies only to the ARN. If you specify only the function name, it is limited to 64 character in length. </p>"
                }
            ]
        },
        "GetPolicyResponse": {
            "type": "structure",
            "members": [
                {
                    "name": "Policy",
                    "shape": "String",
                    "documentation": "<p>The access policy associated with the specified function. The response returns the same as a string using \"\\\" as an escape character in the JSON. </p>"
                }
            ]
        },
        "Handler": {
            "type": "string"
        },
        "HttpStatus": {
            "type": "integer"
        },
        "Integer": {
            "type": "integer"
        },
        "InvalidParameterValueException": {
            "type": "structure",
            "documentation": "<p>One of the parameters in the request is invalid. For example, if you provided an IAM role for AWS Lambda to assume in the <code>CreateFunction</code> or the <code>UpdateFunctionConfiguration</code> API, that AWS Lambda is unable to assume you will get this exception. </p>",
            "members": [
                {
                    "name": "Type",
                    "shape": "String"
                },
                {
                    "name": "message",
                    "shape": "String"
                }
            ]
        },
        "InvalidRequestContentException": {
            "type": "structure",
            "documentation": "<p>The request body could not be parsed as JSON.</p>",
            "members": [
                {
                    "name": "Type",
                    "shape": "String"
                },
                {
                    "name": "message",
                    "shape": "String"
                }
            ]
        },
        "InvocationRequest": {
            "type": "structure",
            "members": [
                {
                    "name": "FunctionName",
                    "shape": "FunctionName",
                    "location": "uri",
                    "locationName": "FunctionName",
                    "documentation": "<p>The Lambda function name. </p> <p> You can specify an unqualified function name (for example, \"Thumbnail\") or you can specify Amazon Resource Name (ARN) of the function (for example, \"arn:aws:lambda:us-west-2:account-id:function:ThumbNail\"). AWS Lambda also allows you to specify only the account ID qualifier (for example, \"account-id:Thumbnail\"). Note that the length constraint applies only to the ARN. If you specify only the function name, it is limited to 64 character in length. </p>"
                },
                {
                    "name": "InvocationType",
                    "shape": "InvocationType",
                    "location": "header",
                    "locationName": "X-Amz-Invocation-Type",
                    "documentation": "<p>By default, the <code>Invoke</code> API assumes \"RequestResponse\" invocation type. You can optionally request asynchronous execution by specifying \"Event\" as the <code>InvocationType</code>. You can also use this parameter to request AWS Lambda to not execute the function but do some verification, such as if the caller is authorized to invoke the function and if the inputs are valid. You request this by specifying \"DryRun\" as the <code>InvocationType</code>. This is useful in a cross-account scenario when you want to verify access to a function without running it. </p>"
                },
                {
                    "name": "LogType",
                    "shape": "LogType",
                    "location": "header",
                    "locationName": "X-Amz-Log-Type",
                    "documentation": "<p>You can set this optional parameter to \"Tail\" in the request only if you specify the <code>InvocationType</code> parameter with value \"RequestResponse\". In this case, AWS Lambda returns the base64-encoded last 4 KB of log data produced by your Lambda function in the <code>x-amz-log-results</code> header. </p>"
                },
                {
                    "name": "ClientContext",
                    "shape": "String",
                    "location": "header",
                    "locationName": "X-Amz-Client-Context",
                    "documentation": "<p>Using the <code>ClientContext</code> you can pass client-specific information to the Lambda function you are invoking. You can then process the client information in your Lambda function as you choose through the context variable. For an example of a ClientContext JSON, go to <a href=\"http://docs.aws.amazon.com/mobileanalytics/latest/ug/PutEvents.html\">PutEvents</a> in the <i>Amazon Mobile Analytics API Reference and User Guide</i>.</p> <p>The ClientContext JSON must be base64-encoded.</p>"
                },
                {
                    "name": "Payload",
                    "shape": "Blob",
                    "documentation": "<p>JSON that you want to provide to your Lambda function as input.</p>"
                }
            ]
        },
        "InvocationResponse": {
            "type": "structure",
            "documentation": "<p>Upon success, returns an empty response. Otherwise, throws an exception.</p>",
            "members": [
                {
                    "name": "StatusCode",
                    "shape": "Integer",
                    "location": "statusCode",
                    "documentation": "<p>The HTTP status code will be in the 200 range for successful request. For the \"RequestResonse\" invocation type this status code will be 200. For the \"Event\" invocation type this status code will be 202. For the \"DryRun\" invocation type the status code will be 204. </p>"
                },
                {
                    "name": "FunctionError",
                    "shape": "String",
                    "location": "header",
                    "locationName": "X-Amz-Function-Error",
                    "documentation": "<p>Indicates whether an error occurred while executing the Lambda function. If an error occurred this field will have one of two values; <code>Handled</code> or <code>Unhandled</code>. <code>Handled</code> errors are errors that are reported by the function while the <code>Unhandled</code> errors are those detected and reported by AWS Lambda. Unhandled errors include out of memory errors and function timeouts. For information about how to report an <code>Handled</code> error, see <a href=\"http://docs.aws.amazon.com/lambda/latest/dg/programming-model.html\">Programming Model</a>. </p>"
                },
                {
                    "name": "LogResult",
                    "shape": "String",
                    "location": "header",
                    "locationName": "X-Amz-Log-Result",
                    "documentation": "<p> It is the base64-encoded logs for the Lambda function invocation. This is present only if the invocation type is \"RequestResponse\" and the logs were requested. </p>"
                },
                {
                    "name": "Payload",
                    "shape": "Blob",
                    "documentation": "<p> It is the JSON representation of the object returned by the Lambda function. In This is present only if the invocation type is \"RequestResponse\". </p> <p>In the event of a function error this field contains a message describing the error. For the <code>Handled</code> errors the Lambda function will report this message. For <code>Unhandled</code> errors AWS Lambda reports the message. </p>"
                }
            ]
        },
        "InvocationType": {
            "type": "string"
        },
        "InvokeAsyncRequest": {
            "type": "structure",
            "members": [
                {
                    "name": "FunctionName",
                    "shape": "FunctionName",
                    "location": "uri",
                    "locationName": "FunctionName",
                    "documentation": "<p>The Lambda function name.</p>"
                },
                {
                    "name": "InvokeArgs",
                    "shape": "BlobStream",
                    "documentation": "<p>JSON that you want to provide to your Lambda function as input.</p>"
                }
            ]
        },
        "InvokeAsyncResponse": {
            "type": "structure",
            "documentation": "<p>Upon success, it returns empty response. Otherwise, throws an exception.</p>",
            "members": [
                {
                    "name": "Status",
                    "shape": "HttpStatus",
                    "location": "statusCode",
                    "documentation": "<p>It will be 202 upon success.</p>"
                }
            ]
        },
        "ListEventSourceMappingsRequest": {
            "type": "structure",
            "members": [
                {
                    "name": "EventSourceArn",
                    "shape": "Arn",
                    "location": "querystring",
                    "locationName": "EventSourceArn",
                    "documentation": "<p>The Amazon Resource Name (ARN) of the Amazon Kinesis stream.</p>"
                },
                {
                    "name": "FunctionName",
                    "shape": "FunctionName",
                    "location": "querystring",
                    "locationName": "FunctionName",
                    "documentation": "<p>The name of the Lambda function.</p> <p> You can specify an unqualified function name (for example, \"Thumbnail\") or you can specify Amazon Resource Name (ARN) of the function (for example, \"arn:aws:lambda:us-west-2:account-id:function:ThumbNail\"). AWS Lambda also allows you to specify only the account ID qualifier (for example, \"account-id:Thumbnail\"). Note that the length constraint applies only to the ARN. If you specify only the function name, it is limited to 64 character in length. </p>"
                },
                {
                    "name": "Marker",
                    "shape": "String",
                    "location": "querystring",
                    "locationName": "Marker",
                    "documentation": "<p>Optional string. An opaque pagination token returned from a previous <code>ListEventSourceMappings</code> operation. If present, specifies to continue the list from where the returning call left off. </p>"
                },
                {
                    "name": "MaxItems",
                    "shape": "MaxListItems",
                    "location": "querystring",
                    "locationName": "MaxItems",
                    "documentation": "<p>Optional integer. Specifies the maximum number of event sources to return in response. This value must be greater than 0.</p>"
                }
            ]
        },
        "ListEventSourceMappingsResponse": {
            "type": "structure",
            "documentation": "<p>Contains a list of event sources (see <a>API_EventSourceMappingConfiguration</a>)</p>",
            "members": [
                {
                    "name": "NextMarker",
                    "shape": "String",
                    "documentation": "<p>A string, present if there are more event source mappings.</p>"
                },
                {
                    "name": "EventSourceMappings",
                    "shape": "EventSourceMappingsList",
                    "documentation": "<p>An array of <code>EventSourceMappingConfiguration</code> objects.</p>"
                }
            ]
        },
        "ListFunctionsRequest": {
            "type": "structure",
            "members": [
                {
                    "name": "Marker",
                    "shape": "String",
                    "location": "querystring",
                    "locationName": "Marker",
                    "documentation": "<p>Optional string. An opaque pagination token returned from a previous <code>ListFunctions</code> operation. If present, indicates where to continue the listing. </p>"
                },
                {
                    "name": "MaxItems",
                    "shape": "MaxListItems",
                    "location": "querystring",
                    "locationName": "MaxItems",
                    "documentation": "<p>Optional integer. Specifies the maximum number of AWS Lambda functions to return in response. This parameter value must be greater than 0.</p>"
                }
            ]
        },
        "ListFunctionsResponse": {
            "type": "structure",
            "documentation": "<p>Contains a list of AWS Lambda function configurations (see <a>FunctionConfiguration</a>.</p>",
            "members": [
                {
                    "name": "NextMarker",
                    "shape": "String",
                    "documentation": "<p>A string, present if there are more functions.</p>"
                },
                {
                    "name": "Functions",
                    "shape": "FunctionList",
                    "documentation": "<p>A list of Lambda functions.</p>"
                }
            ]
        },
        "LogType": {
            "type": "string"
        },
        "Long": {
            "type": "long"
        },
        "MaxListItems": {
            "type": "integer"
        },
        "MemorySize": {
            "type": "integer"
        },
        "PolicyLengthExceededException": {
            "type": "structure",
            "documentation": "<p>Lambda function access policy is limited to 20 KB.</p>",
            "members": [
                {
                    "name": "Type",
                    "shape": "String"
                },
                {
                    "name": "message",
                    "shape": "String"
                }
            ]
        },
        "Principal": {
            "type": "string"
        },
        "RemovePermissionRequest": {
            "type": "structure",
            "members": [
                {
                    "name": "FunctionName",
                    "shape": "FunctionName",
                    "location": "uri",
                    "locationName": "FunctionName",
                    "documentation": "<p>Lambda function whose access policy you want to remove a permission from.</p> <p> You can specify an unqualified function name (for example, \"Thumbnail\") or you can specify Amazon Resource Name (ARN) of the function (for example, \"arn:aws:lambda:us-west-2:account-id:function:ThumbNail\"). AWS Lambda also allows you to specify only the account ID qualifier (for example, \"account-id:Thumbnail\"). Note that the length constraint applies only to the ARN. If you specify only the function name, it is limited to 64 character in length. </p>"
                },
                {
                    "name": "StatementId",
                    "shape": "StatementId",
                    "location": "uri",
                    "locationName": "StatementId",
                    "documentation": "<p>Statement ID of the permission to remove.</p>"
                }
            ]
        },
        "RequestTooLargeException": {
            "type": "structure",
            "members": [
                {
                    "name": "Type",
                    "shape": "String"
                },
                {
                    "name": "message",
                    "shape": "String"
                }
            ]
        },
        "ResourceConflictException": {
            "type": "structure",
            "documentation": "<p>The resource already exists.</p>",
            "members": [
                {
                    "name": "Type",
                    "shape": "String"
                },
                {
                    "name": "message",
                    "shape": "String"
                }
            ]
        },
        "ResourceNotFoundException": {
            "type": "structure",
            "documentation": "<p>The resource (for example, a Lambda function or access policy statement) specified in the request does not exist.</p>",
            "members": [
                {
                    "name": "Type",
                    "shape": "String"
                },
                {
                    "name": "Message",
                    "shape": "String"
                }
            ]
        },
        "RoleArn": {
            "type": "string"
        },
        "Runtime": {
            "type": "string"
        },
        "S3Bucket": {
            "type": "string"
        },
        "S3Key": {
            "type": "string"
        },
        "S3ObjectVersion": {
            "type": "string"
        },
        "ServiceException": {
            "type": "structure",
            "documentation": "<p>The AWS Lambda service encountered an internal error.</p>",
            "members": [
                {
                    "name": "Type",
                    "shape": "String"
                },
                {
                    "name": "Message",
                    "shape": "String"
                }
            ]
        },
        "SourceOwner": {
            "type": "string"
        },
        "StatementId": {
            "type": "string"
        },
        "String": {
            "type": "string"
        },
        "Timeout": {
            "type": "integer"
        },
        "Timestamp": {
            "type": "string"
        },
        "TooManyRequestsException": {
            "type": "structure",
            "members": [
                {
                    "name": "retryAfterSeconds",
                    "shape": "String",
                    "location": "header",
                    "locationName": "Retry-After",
                    "documentation": "<p>The number of seconds the caller should wait before retrying.</p>"
                },
                {
                    "name": "Type",
                    "shape": "String"
                },
                {
                    "name": "message",
                    "shape": "String"
                }
            ]
        },
        "UnsupportedMediaTypeException": {
            "type": "structure",
            "members": [
                {
                    "name": "Type",
                    "shape": "String"
                },
                {
                    "name": "message",
                    "shape": "String"
                }
            ]
        },
        "UpdateEventSourceMappingRequest": {
            "type": "structure",
            "members": [
                {
                    "name": "UUID",
                    "shape": "String",
                    "location": "uri",
                    "locationName": "UUID",
                    "documentation": "<p>The event source mapping identifier.</p>"
                },
                {
                    "name": "FunctionName",
                    "shape": "FunctionName",
                    "documentation": "<p>The Lambda function to which you want the stream records sent.</p> <p> You can specify an unqualified function name (for example, \"Thumbnail\") or you can specify Amazon Resource Name (ARN) of the function (for example, \"arn:aws:lambda:us-west-2:account-id:function:ThumbNail\"). AWS Lambda also allows you to specify only the account ID qualifier (for example, \"account-id:Thumbnail\"). Note that the length constraint applies only to the ARN. If you specify only the function name, it is limited to 64 character in length. </p>"
                },
                {
                    "name": "Enabled",
                    "shape": "Enabled",
                    "documentation": "<p>Specifies whether AWS Lambda should actively poll the stream or not. If disabled, AWS Lambda will not poll the stream.</p>"
                },
                {
                    "name": "BatchSize",
                    "shape": "BatchSize",
                    "documentation": "<p>The maximum number of stream records that can be sent to your Lambda function for a single invocation.</p>"
                }
            ]
        },
        "UpdateFunctionCodeRequest": {
            "type": "structure",
            "members": [
                {
                    "name": "FunctionName",
                    "shape": "FunctionName",
                    "location": "uri",
                    "locationName": "FunctionName",
                    "documentation": "<p>The existing Lambda function name whose code you want to replace.</p> <p> You can specify an unqualified function name (for example, \"Thumbnail\") or you can specify Amazon Resource Name (ARN) of the function (for example, \"arn:aws:lambda:us-west-2:account-id:function:ThumbNail\"). AWS Lambda also allows you to specify only the account ID qualifier (for example, \"account-id:Thumbnail\"). Note that the length constraint applies only to the ARN. If you specify only the function name, it is limited to 64 character in length. </p>"
                },
                {
                    "name": "ZipFile",
                    "shape": "Blob",
                    "documentation": "<p>Based64-encoded .zip file containing your packaged source code.</p>"
                },
                {
                    "name": "S3Bucket",
                    "shape": "S3Bucket",
                    "documentation": "<p>Amazon S3 bucket name where the .zip file containing your deployment package is stored. This bucket must reside in the same AWS region where you are creating the Lambda function.</p>"
                },
                {
                    "name": "S3Key",
                    "shape": "S3Key",
                    "documentation": "<p>The Amazon S3 object (the deployment package) key name you want to upload. </p>"
                },
                {
                    "name": "S3ObjectVersion",
                    "shape": "S3ObjectVersion",
                    "documentation": "<p>The Amazon S3 object (the deployment package) version you want to upload.</p>"
                }
            ]
        },
        "UpdateFunctionConfigurationRequest": {
            "type": "structure",
            "members": [
                {
                    "name": "FunctionName",
                    "shape": "FunctionName",
                    "location": "uri",
                    "locationName": "FunctionName",
                    "documentation": "<p>The name of the Lambda function.</p> <p> You can specify an unqualified function name (for example, \"Thumbnail\") or you can specify Amazon Resource Name (ARN) of the function (for example, \"arn:aws:lambda:us-west-2:account-id:function:ThumbNail\"). AWS Lambda also allows you to specify only the account ID qualifier (for example, \"account-id:Thumbnail\"). Note that the length constraint applies only to the ARN. If you specify only the function name, it is limited to 64 character in length. </p>"
                },
                {
                    "name": "Role",
                    "shape": "RoleArn",
                    "documentation": "<p>The Amazon Resource Name (ARN) of the IAM role that Lambda will assume when it executes your function. </p>"
                },
                {
                    "name": "Handler",
                    "shape": "Handler",
                    "documentation": "<p>The function that Lambda calls to begin executing your function. For Node.js, it is the <i>module-name.export</i> value in your function. </p>"
                },
                {
                    "name": "Description",
                    "shape": "Description",
                    "documentation": "<p>A short user-defined function description. AWS Lambda does not use this value. Assign a meaningful description as you see fit.</p>"
                },
                {
                    "name": "Timeout",
                    "shape": "Timeout",
                    "documentation": "<p>The function execution time at which AWS Lambda should terminate the function. Because the execution time has cost implications, we recommend you set this value based on your expected execution time. The default is 3 seconds. </p>"
                },
                {
                    "name": "MemorySize",
                    "shape": "MemorySize",
                    "documentation": "<p>The amount of memory, in MB, your Lambda function is given. AWS Lambda uses this memory size to infer the amount of CPU allocated to your function. Your function use-case determines your CPU and memory requirements. For example, a database operation might need less memory compared to an image processing function. The default value is 128 MB. The value must be a multiple of 64 MB.</p>"
                }
            ]
        }
    }
}